name: 'Terraform workflow - Infrastructure'

on:
  # Trigger on pushes to the main branch
  push:
    branches:
      - main
    # Only run if files in the terraform directory changed or workflow itself changes
    paths:
      - 'terraform/**'
      - '.github/workflows/infrastructure.yaml'

  # Allows manual triggering from the Actions tab
  workflow_dispatch:

# Permissions needed for checkout
permissions:
  contents: 'read'

# Prevent concurrent runs on the same branch to avoid state conflicts
concurrency:
  group: 'terraform-infra-apply'
  cancel-in-progress: true

jobs:
  terraform-plan-and-apply:
    name: 'Terraform Plan and Apply'
    runs-on: ubuntu-latest

    # Set default working directory for Terraform commands
    defaults:
      run:
        working-directory: ./terraform

    env:
      TF_VAR_project_id: ${{ vars.GCP_PROJECT_ID }}

    steps:
      # 1. Checkout code
      - name: Checkout Code
        uses: actions/checkout@v4

      # 2. Authenticate to Google Cloud using service account key, can be replaced with workload identity
      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      # 3. Setup Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.11.x" 
          terraform_wrapper: false

      # 4. Terraform Init
      - name: Terraform Init
        id: init
        run: |
          terraform init \
            -backend-config="bucket=${{ secrets.TF_OUTPUT_BUCKET }}" \
            -backend-config="prefix=birthday-app/tfstate" \
            -input=false

      # 5. Terraform Validate
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      # 6. Terraform Plan
      - name: Terraform Plan
        id: plan
        run: terraform plan -out=tfplan -input=false -no-color

      # 7. Terraform Apply
      - name: Terraform Apply
        id: apply
        run: terraform apply -auto-approve tfplan

      # 8. Generate Terraform Outputs as JSON
      - name: Generate Outputs JSON
        id: output
        run: terraform output -json > outputs.json

      # 9. Upload Outputs JSON to GCS
      - name: Upload Terraform Outputs to GCS
        uses: google-github-actions/upload-cloud-storage@v2
        with:
          path: ./terraform/outputs.json
          destination: ${{ secrets.TF_OUTPUT_BUCKET }}/${{ vars.TF_OUTPUT_PATH }}
          parent: false
